sel <- 1*sel
id <- which(sel == 1)
recently_contamined <- ady_nodes[id]
# En el caso que ningun nodo se contamine, el proceso se detiene!!
if ( vector.is.empty(recently_contamined)  ) {
print(paste("There were no more transfers! Process stopped at it:  ", t))
break
}
contamined <- c(contamined, recently_contamined) # se registran los nuevos nodos contaminados
contamined_nodes[[t]] <- recently_contamined
# para el siguiente ciclo.
tested <- c(tested, ady_nodes) # se registran los nodos que ya han sido testeados
nodes_to_test <- recently_contamined
V(g)$contamined[recently_contamined] <- 1
number_of_contamined[t, ] <- c(t, length(recently_contamined))
}
}
number_of_contamined$acum <- cumsum(number_of_contamined$infected)
Sims[, s] <- number_of_contamined$acum
return(Sims)
}
Sms <- msg_transfer_sim(g = g, p = 0.5, periods = 50, n_sims=10)
head(Sms)
Sims <- matrix(NA, ncol=n_sims+1, nrow = periods)
n_sims=10
p=0.5
periods=50
s=1
Sims <- matrix(NA, ncol=n_sims+1, nrow = periods)
Sims
s=1
V(g)$contamined <- 0
contamined <- vector(length=0) # nodos contaminados en s=1
tested <- vector(length=0) # nodos por los que se han pasado
contamined <- c(contamined, human_node_start)
# registraremos los nodos que se van contagiendo:
contamined_nodes <- vector("list", length = periods)
number_of_contamined <- matrix(NA, ncol=2, nrow=periods ) # registramos numero de nodos contaminados en cada tiempo
number_of_contamined <- as.data.frame(number_of_contamined)
colnames(number_of_contamined) <- c("time", "infected")
V(g)$contamined[human_node_start] <- 1
tested <- c(tested, human_node_start)
nodes_to_test <- human_node_start
for (t in 1:periods) {
#vemos los nodos adyacentes
ady_nodes <- adjacent_vertices(g, nodes_to_test)
ady_nodes <- as.numeric(unlist(ady_nodes))
# vemos si algunos de los nodos adyacentes ya estan contaminados, en ese caso, los sacamos
id_drop <- which(V(g)$contamined[ady_nodes] == 1)
if ( !vector.is.empty(id_drop) ) {
ady_nodes <- ady_nodes[-id_drop]
}
# vemos si algunos de los nodos adyacentes ya habian sido testeados, en ese caso, los sacamos
id_drop <- which( ady_nodes %in% tested )
if ( !vector.is.empty(id_drop) ) {
ady_nodes <- ady_nodes[-id_drop]
}
# En caso que hayan sido testeados todos los nodos, debemos parar
if ( vector.is.empty(ady_nodes)  ) {
print(paste("All the nodes have been tested! Process stopped at it:  ", t))
break
}
# contaminacion de nodos
sel <- (runif(length(ady_nodes)) > 0.5)
sel <- 1*sel
id <- which(sel == 1)
recently_contamined <- ady_nodes[id]
# En el caso que ningun nodo se contamine, el proceso se detiene!!
if ( vector.is.empty(recently_contamined)  ) {
print(paste("There were no more transfers! Process stopped at it:  ", t))
break
}
contamined <- c(contamined, recently_contamined) # se registran los nuevos nodos contaminados
contamined_nodes[[t]] <- recently_contamined
# para el siguiente ciclo.
tested <- c(tested, ady_nodes) # se registran los nodos que ya han sido testeados
nodes_to_test <- recently_contamined
V(g)$contamined[recently_contamined] <- 1
number_of_contamined[t, ] <- c(t, length(recently_contamined))
}
number_of_contamined$acum <- cumsum(number_of_contamined$infected)
number_of_contamined
Sims[, s] <- number_of_contamined$acum
Sims
msg_transfer_sim <- function(g, p, periods, n_sims) {
# aqui se guardan todas las simulaciones
Sims <- matrix(NA, ncol=n_sims+1, nrow = periods)
for (s in 1:n_sims ) {
V(g)$contamined <- 0
contamined <- vector(length=0) # nodos contaminados en s=1
tested <- vector(length=0) # nodos por los que se han pasado
contamined <- c(contamined, human_node_start)
# registraremos los nodos que se van contagiendo:
contamined_nodes <- vector("list", length = periods)
number_of_contamined <- matrix(NA, ncol=2, nrow=periods ) # registramos numero de nodos contaminados en cada tiempo
number_of_contamined <- as.data.frame(number_of_contamined)
colnames(number_of_contamined) <- c("time", "infected")
V(g)$contamined[human_node_start] <- 1
tested <- c(tested, human_node_start)
nodes_to_test <- human_node_start
for (t in 1:periods) {
#vemos los nodos adyacentes
ady_nodes <- adjacent_vertices(g, nodes_to_test)
ady_nodes <- as.numeric(unlist(ady_nodes))
# vemos si algunos de los nodos adyacentes ya estan contaminados, en ese caso, los sacamos
id_drop <- which(V(g)$contamined[ady_nodes] == 1)
if ( !vector.is.empty(id_drop) ) {
ady_nodes <- ady_nodes[-id_drop]
}
# vemos si algunos de los nodos adyacentes ya habian sido testeados, en ese caso, los sacamos
id_drop <- which( ady_nodes %in% tested )
if ( !vector.is.empty(id_drop) ) {
ady_nodes <- ady_nodes[-id_drop]
}
# En caso que hayan sido testeados todos los nodos, debemos parar
if ( vector.is.empty(ady_nodes)  ) {
print(paste("All the nodes have been tested! Process stopped at it:  ", t))
break
}
# contaminacion de nodos
sel <- (runif(length(ady_nodes)) > 0.5)
sel <- 1*sel
id <- which(sel == 1)
recently_contamined <- ady_nodes[id]
# En el caso que ningun nodo se contamine, el proceso se detiene!!
if ( vector.is.empty(recently_contamined)  ) {
print(paste("There were no more transfers! Process stopped at it:  ", t))
break
}
contamined <- c(contamined, recently_contamined) # se registran los nuevos nodos contaminados
contamined_nodes[[t]] <- recently_contamined
# para el siguiente ciclo.
tested <- c(tested, ady_nodes) # se registran los nodos que ya han sido testeados
nodes_to_test <- recently_contamined
V(g)$contamined[recently_contamined] <- 1
number_of_contamined[t, ] <- c(t, length(recently_contamined))
}
}
number_of_contamined$acum <- cumsum(number_of_contamined$infected)
Sims[, s] <- number_of_contamined$acum
return(Sims)
}
Sms <- msg_transfer_sim(g = g, p = 0.5, periods = 50, n_sims=10)
head(Sms)
msg_transfer_sim <- function(g, p, periods, n_sims) {
# aqui se guardan todas las simulaciones
Sims <- matrix(NA, ncol=n_sims+1, nrow = periods)
for (s in 1:n_sims ) {
V(g)$contamined <- 0
contamined <- vector(length=0) # nodos contaminados en s=1
tested <- vector(length=0) # nodos por los que se han pasado
contamined <- c(contamined, human_node_start)
# registraremos los nodos que se van contagiendo:
contamined_nodes <- vector("list", length = periods)
number_of_contamined <- matrix(NA, ncol=2, nrow=periods ) # registramos numero de nodos contaminados en cada tiempo
number_of_contamined <- as.data.frame(number_of_contamined)
colnames(number_of_contamined) <- c("time", "infected")
V(g)$contamined[human_node_start] <- 1
tested <- c(tested, human_node_start)
nodes_to_test <- human_node_start
for (t in 1:periods) {
#vemos los nodos adyacentes
ady_nodes <- adjacent_vertices(g, nodes_to_test)
ady_nodes <- as.numeric(unlist(ady_nodes))
# vemos si algunos de los nodos adyacentes ya estan contaminados, en ese caso, los sacamos
id_drop <- which(V(g)$contamined[ady_nodes] == 1)
if ( !vector.is.empty(id_drop) ) {
ady_nodes <- ady_nodes[-id_drop]
}
# vemos si algunos de los nodos adyacentes ya habian sido testeados, en ese caso, los sacamos
id_drop <- which( ady_nodes %in% tested )
if ( !vector.is.empty(id_drop) ) {
ady_nodes <- ady_nodes[-id_drop]
}
# En caso que hayan sido testeados todos los nodos, debemos parar
if ( vector.is.empty(ady_nodes)  ) {
print(paste("All the nodes have been tested! Process stopped at it:  ", t))
break
}
# contaminacion de nodos
sel <- (runif(length(ady_nodes)) > 0.5)
sel <- 1*sel
id <- which(sel == 1)
recently_contamined <- ady_nodes[id]
# En el caso que ningun nodo se contamine, el proceso se detiene!!
if ( vector.is.empty(recently_contamined)  ) {
print(paste("There were no more transfers! Process stopped at it:  ", t))
break
}
contamined <- c(contamined, recently_contamined) # se registran los nuevos nodos contaminados
contamined_nodes[[t]] <- recently_contamined
# para el siguiente ciclo.
tested <- c(tested, ady_nodes) # se registran los nodos que ya han sido testeados
nodes_to_test <- recently_contamined
V(g)$contamined[recently_contamined] <- 1
number_of_contamined[t, ] <- c(t, length(recently_contamined))
}
number_of_contamined$acum <- cumsum(number_of_contamined$infected)
Sims[, s] <- number_of_contamined$acum
}
return(Sims)
}
Sms <- msg_transfer_sim(g = g, p = 0.5, periods = 50, n_sims=10)
head(Sms)
Sms[,n_sims+1] <- c(1:periods)
head(Sms)
plot(Sims[, n_sims+1], Sims[,1], type="l",
xlab="Time", ylab="Acum(t)")
colors = rainbow(n_sims)
# add lines
for ( i in 1:n_sims) {
lines(Sims[, n_sims+1], sims[,i], type="l", col=colors[i])
}
plot(Sims[, n_sims+1], Sims[,1], type="l",
xlab="Time", ylab="Acum(t)")
colors = rainbow(n_sims)
# add lines
for ( i in 1:n_sims) {
lines(Sims[, n_sims+1], Sims[,i], type="l", col=colors[i])
}
plot(Sims[, n_sims+1], Sims[,1], type="l",
xlab="Time", ylab="Acum(t)")
colors = rainbow(n_sims)
Sims[, n_sims+1]
dim(Sims)
head(Sims)
Sms <- msg_transfer_sim(g = g, p = 0.5, periods = 50, n_sims=10)
Sms[,n_sims+1] <- c(1:periods)
plot(Sims[, n_sims+1], Sims[,1], type="l",
xlab="Time", ylab="Acum(t)")
colors = rainbow(n_sims)
head(Sims)
Sms <- msg_transfer_sim(g = g, p = 0.5, periods = 50, n_sims=10)
Sms[,n_sims+1] <- c(1:periods)
plot(Sms[, n_sims+1], Sms[,1], type="l",
xlab="Time", ylab="Acum(t)")
colors = rainbow(n_sims)
for ( i in 1:n_sims) {
lines(Sms[, n_sims+1], Sms[,i], type="l", col=colors[i])
}
plot(Sms[, n_sims+1], Sms[,1], type="l",
xlab="Time", ylab="Acum(t)", ylim=c(0, N) )
colors = rainbow(n_sims)
for ( i in 1:n_sims) {
lines(Sms[, n_sims+1], Sms[,i], type="l", col=colors[i])
}
plot(Sms[, n_sims+1], Sms[,1], type="l",
xlab="Time", ylab="Acum(t)", ylim=c(0, 120), xlim=c(0, 20) )
colors = rainbow(n_sims)
for ( i in 1:n_sims) {
lines(Sms[, n_sims+1], Sms[,i], type="l", col=colors[i])
}
Sms <- msg_transfer_sim(g = g, p = 0.5, periods = 50, n_sims=100)
Sms[,n_sims+1] <- c(1:periods)
plot(Sms[, n_sims+1], Sms[,1], type="l",
xlab="Time", ylab="Acum(t)", ylim=c(0, 120), xlim=c(0, 20) )
colors = rainbow(n_sims)
# add lines
for ( i in 1:n_sims) {
lines(Sms[, n_sims+1], Sms[,i], type="l", col=colors[i])
}
# Seteo del plot
plot(Sms[, n_sims+1], Sms[,1], type="l",
xlab="Time", ylab="Acum(t)", ylim=c(0, 200), xlim=c(0, 30) )
colors = rainbow(n_sims)
# add lines
for ( i in 1:n_sims) {
lines(Sms[, n_sims+1], Sms[,i], type="l", col=colors[i])
}
dim(Sms)
n_sims
# multiple plots of the simulation:
# Seteo del plot
plot(Sms[, n_sims+1], Sms[,1], type="l",
xlab="Time", ylab="Acum(t)", ylim=c(0, 200), xlim=c(0, 30) )
colors = rainbow(100)
# add lines
for ( i in 1:100) {
lines(Sms[, n_sims+1], Sms[,i], type="l", col=colors[i])
}
q()
sqrt(9*500)
rm(list = ls())
library(ggplot2)
library(gdata)
library(igraph)
source("lattice_creation_function.R")
source("get_powerLaw_prob_function.R")
source("genSpatialDistribution_function.R")
source("genSpatialNet_function.R")
vector.is.empty <- function(x) return(length(x) ==0 ) # para detectar si un vector esta vacio
# PARAMETROS
# Nota: con m=size_lattice=30 y N=100, el ratio (m^2)/N = 9
# Nota: con m=size_lattice=95 y N=1000, se demora mucho
size_lattice = 67 # numero de vertices por lado del lattice
N = 500 # number of humans
a = 1.1 # clustering exponent. the Higher the exponent, more difficult the conection at higher distances
# # # # # # # # # # # # # # # # # # 1. Generate a spatial ER network (ver simulation_v1.R)
# m es el lado del cuadrado.
# obs: cuando N/m^2 es aprox igual al 10%, la red comienza a conectarse mas.
# n/m^2 es la probabilidad que un hueco del lattice sea ocupado por un humanoide.
df <- lattice_creation(m = size_lattice, number_of_humans = N)
install.packages("Rfast")
# PARAMETROS
# Nota: con m=size_lattice=30 y N=100, el ratio (m^2)/N = 9
# Nota: con m=size_lattice=95 y N=1000, se demora mucho
# Nota: con m=size_lattice=67 y N=500, se demora mucho
size_lattice = 30 # numero de vertices por lado del lattice
N = 100 # number of humans
a = 1.1 # clustering exponent. the Higher the exponent, more difficult the conection at higher distances
# # # # # # # # # # # # # # # # # # 1. Generate a spatial ER network (ver simulation_v1.R)
# m es el lado del cuadrado.
# obs: cuando N/m^2 es aprox igual al 10%, la red comienza a conectarse mas.
# n/m^2 es la probabilidad que un hueco del lattice sea ocupado por un humanoide.
df <- lattice_creation(m = size_lattice, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
genSpatialNet <- function(df, number_of_humans, C, alpha, method="normal") {
library(igraph)
library(Rfast)
message("Now computing fistance matrix.....")
if (method == "fast") {
#distances <- dist(df[, c(2,3)] )
distances <- Dist(df[, c(2,3)] , method = "euclidean", square = TRUE, vector = FALSE)
} else {
distances <- dist(df[, c(2,3)] )
}
distances <- as.matrix(distances)
nodes <- colnames(distances)
A <- matrix(NA, ncol = number_of_humans, nrow = number_of_humans) # adjacency matrix
colnames(A) <- rownames(A) <- nodes
# # Generating the spatial net according to the spatial ER
for ( i in 1:number_of_humans) {
print(paste("Iteration ", i, " of ", number_of_humans))
nodo = nodes[i]
otherones <- setdiff(nodes, nodo)
cols_id <- which(colnames(distances) %in% otherones)
row_id <- which(rownames(distances) == nodo)
distances_to_node <- distances[row_id, cols_id]
distances_to_probabilities <- get_powerLaw_prob(C = C, alpha = alpha, d = distances_to_node)
distances_to_probabilities[!is.finite(distances_to_probabilities)] <- 1
random_ <- runif(length(distances_to_probabilities) )
connections <- 1*(random_ <= distances_to_probabilities)
# put connections to the adjacency matrix
A[row_id, cols_id] <- connections
}
# we need to make A simmetrical. Just drop the lower part of the matrix
lowerTriangle(A) <- upperTriangle(A, byrow = TRUE)
# # the resulting net
g <- graph_from_adjacency_matrix(A, mode = "undirected", diag = FALSE, add.colnames = NULL, add.rownames = NA)
return(g)
}
size_lattice = 30 # numero de vertices por lado del lattice
N = 200 # number of humans
a = 1.1 # clustering exponent. the Higher the exponent, more difficult the conection at higher distances
# # # # # # # # # # # # # # # # # # 1. Generate a spatial ER network (ver simulation_v1.R)
# m es el lado del cuadrado.
# obs: cuando N/m^2 es aprox igual al 10%, la red comienza a conectarse mas.
# n/m^2 es la probabilidad que un hueco del lattice sea ocupado por un humanoide.
df <- lattice_creation(m = size_lattice, number_of_humans = N)
size_lattice = 30 # numero de vertices por lado del lattice
N = 100 # number of humans
a = 1.1 # clustering exponent. the Higher the exponent, more difficult the conection at higher distances
# # # # # # # # # # # # # # # # # # 1. Generate a spatial ER network (ver simulation_v1.R)
# m es el lado del cuadrado.
# obs: cuando N/m^2 es aprox igual al 10%, la red comienza a conectarse mas.
# n/m^2 es la probabilidad que un hueco del lattice sea ocupado por un humanoide.
df <- lattice_creation(m = size_lattice, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a, method="normal")
genSpatialNet <- function(df, number_of_humans, C, alpha, method="normal") {
library(igraph)
library(Rfast)
message("Now computing distance matrix.....")
if (method == "fast") {
#distances <- dist(df[, c(2,3)] )
distances <- Dist(df[, c(2,3)] , method = "euclidean", square = TRUE, vector = FALSE)
} else {
distances <- dist(df[, c(2,3)] )
}
distances <- as.matrix(distances)
nodes <- colnames(distances)
A <- matrix(NA, ncol = number_of_humans, nrow = number_of_humans) # adjacency matrix
colnames(A) <- rownames(A) <- nodes
# # Generating the spatial net according to the spatial ER
for ( i in 1:number_of_humans) {
print(paste("Iteration ", i, " of ", number_of_humans))
nodo = nodes[i]
otherones <- setdiff(nodes, nodo)
cols_id <- which(colnames(distances) %in% otherones)
row_id <- which(rownames(distances) == nodo)
distances_to_node <- distances[row_id, cols_id]
distances_to_probabilities <- get_powerLaw_prob(C = C, alpha = alpha, d = distances_to_node)
distances_to_probabilities[!is.finite(distances_to_probabilities)] <- 1
random_ <- runif(length(distances_to_probabilities) )
connections <- 1*(random_ <= distances_to_probabilities)
# put connections to the adjacency matrix
A[row_id, cols_id] <- connections
}
# we need to make A simmetrical. Just drop the lower part of the matrix
lowerTriangle(A) <- upperTriangle(A, byrow = TRUE)
# # the resulting net
g <- graph_from_adjacency_matrix(A, mode = "undirected", diag = FALSE, add.colnames = NULL, add.rownames = NA)
return(g)
}
size_lattice = 30 # numero de vertices por lado del lattice
N = 100 # number of humans
a = 1.1 # clustering exponent. the Higher the exponent, more difficult the conection at higher distances
# # # # # # # # # # # # # # # # # # 1. Generate a spatial ER network (ver simulation_v1.R)
# m es el lado del cuadrado.
# obs: cuando N/m^2 es aprox igual al 10%, la red comienza a conectarse mas.
# n/m^2 es la probabilidad que un hueco del lattice sea ocupado por un humanoide.
df <- lattice_creation(m = size_lattice, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a, method="fast")
sqrt(9*200)
size_lattice = 42 # numero de vertices por lado del lattice
N = 200 # number of humans
a = 1.1 # clustering exponent. the Higher the exponent, more difficult the conection at higher distances
# # # # # # # # # # # # # # # # # # 1. Generate a spatial ER network (ver simulation_v1.R)
# m es el lado del cuadrado.
# obs: cuando N/m^2 es aprox igual al 10%, la red comienza a conectarse mas.
# n/m^2 es la probabilidad que un hueco del lattice sea ocupado por un humanoide.
df <- lattice_creation(m = size_lattice, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a, method="fast")
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
size_lattice = 42 # numero de vertices por lado del lattice
N = 200 # number of humans
a = 1.1 # clustering exponent. the Higher the exponent, more difficult the conection at higher distances
# # # # # # # # # # # # # # # # # # 1. Generate a spatial ER network (ver simulation_v1.R)
# m es el lado del cuadrado.
# obs: cuando N/m^2 es aprox igual al 10%, la red comienza a conectarse mas.
# n/m^2 es la probabilidad que un hueco del lattice sea ocupado por un humanoide.
df <- lattice_creation(m = size_lattice, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a, method="normal")
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
distances <- Dist(df[, c(2,3)] , method = "euclidean", square = TRUE, vector = FALSE)
distances
distances <- dist(df[, c(2,3)] )
distances
distances <- Dist(df[, c(2,3)] , method = "euclidean", square = TRUE, vector = FALSE)
class(distances)
hist(distances,30)
hist(distances,30)
distances <- dist(df[, c(2,3)] )
distances <- as.matrix(distances)
hist(distances,30)
distances <- Dist(df[, c(2,3)] , method = "euclidean", square = TRUE, vector = FALSE)
hist(as.matrix(dist(distances)))
hist(as.matrix(dist(distances)),30)
distances <- Dist(df[, c(2,3)] , method = "euclidean", square = TRUE, vector = FALSE)
distances <- as.matrix( dist(x) )
distances <- Dist(df[, c(2,3)] , method = "euclidean", square = TRUE, vector = FALSE)
distances <- as.matrix( dist(distances) )
hist(distances,30)
distances <- dist(df[, c(2,3)] )
distances <- as.matrix(distances)
colnames(distances)
hist(distances, 30)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a, method="fast")
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a, method="normal")
distances1 <- Dist(df[, c(2,3)] , method = "euclidean", square = TRUE, vector = FALSE)
distances1 <- as.matrix( dist(distances) )
distances2 <- dist(df[, c(2,3)] )
distances2 <- as.matrix(distances)
plot(distances1, distances2)
plot(distances1, distances2)
q()
