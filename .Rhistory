connections <- 1*(random_ <= distances_to_probabilities)
# put connections to the adjacency matrix
A[row_id, cols_id] <- connections
for ( i in 1:number_of_humans) {
nodo = nodes[i]
otherones <- setdiff(nodes, nodo)
cols_id <- which(colnames(distances) %in% otherones)
row_id <- which(rownames(distances) == nodo)
distances_to_node <- distances[row_id, cols_id]
distances_to_probabilities <- get_powerLaw_prob(C = C, alpha = alpha, d = distances_to_node)
random_ <- runif(length(distances_to_probabilities) )
connections <- 1*(random_ <= distances_to_probabilities)
# put connections to the adjacency matrix
A[row_id, cols_id] <- connections
}
lowerTriangle(A) <- upperTriangle(A, byrow = TRUE)
library(ggplot2)
library(gdata)
library(igraph)
rm(list = ls())
library(ggplot2)
library(gdata)
library(igraph)
source("lattice_creation_function.R")
source("get_powerLaw_prob_function.R")
source("genSpatialDistribution_function.R")
source("genSpatialNet_function.R")
df <- lattice_creation(m = 100, number_of_humans = 40)
C <- genStatialDistribution(df = df, alpha = 1.5)
g <- genSpatialNet(df = df, number_of_humans = 100, C = C, alpha = 1.5)
N = 40
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
get_powerLaw_prob(C = C, alpha = a, d = 0)
genSpatialNet <- function(df, number_of_humans, C, alpha) {
library(igraph)
distances <- dist(df[, c(2,3)] )
distances <- as.matrix(distances)
nodes <- colnames(distances)
A <- matrix(NA, ncol = number_of_humans, nrow = number_of_humans) # adjacency matrix
colnames(A) <- rownames(A) <- nodes
# # Generating the spatial net according to the spatial ER
for ( i in 1:number_of_humans) {
nodo = nodes[i]
otherones <- setdiff(nodes, nodo)
cols_id <- which(colnames(distances) %in% otherones)
row_id <- which(rownames(distances) == nodo)
distances_to_node <- distances[row_id, cols_id]
distances_to_probabilities <- get_powerLaw_prob(C = C, alpha = alpha, d = distances_to_node)
distances_to_probabilities[!id.finite(distances_to_probabilities)] <- 1
random_ <- runif(length(distances_to_probabilities) )
connections <- 1*(random_ <= distances_to_probabilities)
# put connections to the adjacency matrix
A[row_id, cols_id] <- connections
}
# we need to make A simmetrical. Just drop the lower part of the matrix
lowerTriangle(A) <- upperTriangle(A, byrow = TRUE)
# # the resulting net
g <- graph_from_adjacency_matrix(A, mode = "undirected", diag = FALSE, add.colnames = NULL, add.rownames = NA)
return(g)
}
N = 100
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
genSpatialNet <- function(df, number_of_humans, C, alpha) {
library(igraph)
distances <- dist(df[, c(2,3)] )
distances <- as.matrix(distances)
nodes <- colnames(distances)
A <- matrix(NA, ncol = number_of_humans, nrow = number_of_humans) # adjacency matrix
colnames(A) <- rownames(A) <- nodes
# # Generating the spatial net according to the spatial ER
for ( i in 1:number_of_humans) {
nodo = nodes[i]
otherones <- setdiff(nodes, nodo)
cols_id <- which(colnames(distances) %in% otherones)
row_id <- which(rownames(distances) == nodo)
distances_to_node <- distances[row_id, cols_id]
distances_to_probabilities <- get_powerLaw_prob(C = C, alpha = alpha, d = distances_to_node)
distances_to_probabilities[!is.finite(distances_to_probabilities)] <- 1
random_ <- runif(length(distances_to_probabilities) )
connections <- 1*(random_ <= distances_to_probabilities)
# put connections to the adjacency matrix
A[row_id, cols_id] <- connections
}
# we need to make A simmetrical. Just drop the lower part of the matrix
lowerTriangle(A) <- upperTriangle(A, byrow = TRUE)
# # the resulting net
g <- graph_from_adjacency_matrix(A, mode = "undirected", diag = FALSE, add.colnames = NULL, add.rownames = NA)
return(g)
}
N = 100
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 1000
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
genStatialDistribution <-function(df, alpha) {
# # Generating the spatial ER net
# 1. get de distance matrix among humans from the lattice
distances <- dist(df[, c(2,3)] )
max_distance <- max(distances)
min_distance <- min(distances)
# if (min_distance == 0) {
#   #print("Danger!!! We have min distance = 0. That is not allowed :(")
#   stop("Danger!!! We have min distance = 0. That is not allowed :(")
# }
# 2. computing the normalizing coefficient C
C <- (1 - alpha)/ (max_distance^(1-alpha) - min_distance^(1-alpha) )
return(C)
# dd <- seq(from = min_distance, to = max_distance, length.out = 200)
# pdf <- C*dd^(-alpha)
# plot(dd, pdf)
}
N = 500
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 100
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 200
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 200
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 200
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 200
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 200
a = 1.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 100
a = 1.01
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
# creation: 19-nov-19
# name: simulation_V1.R
rm(list = ls())
library(ggplot2)
library(gdata)
library(igraph)
source("lattice_creation_function.R")
source("get_powerLaw_prob_function.R")
source("genSpatialDistribution_function.R")
source("genSpatialNet_function.R")
N = 100
a = 1.01
df <- lattice_creation(m = 100, number_of_humans = N)
df
View(lattice_creation)
duplicated(df[,c(2,3)])
chec <- duplicated(df[,c(2,3)])
sum(chec)
lattice_creation <- function(m, number_of_humans) {
x_axe <- y_axe <- 1:m
back_to_generate = 1
while ( back_to_generate == 1) {
# sampling positions
x_positions <- sample(x_axe, number_of_humans, replace = TRUE) # with TRUE coordinates migtht be repeated.
y_positions <- sample(x_axe, number_of_humans, replace = TRUE)
# create dataframe of humans
df <- data.frame(human = 1:number_of_humans, x = x_positions, y = y_positions)
chec <- duplicated(df[,c(2,3)])
if (chec != 0) {
back_to_generate = 1
} else {
back_to_generate = 0
}
}
return(df)
}
lattice_creation <- function(m, number_of_humans) {
x_axe <- y_axe <- 1:m
back_to_generate = 1
while ( back_to_generate == 1) { # en caso que hayan coordenadas repetidas, se genera otra grilla.
# sampling positions
x_positions <- sample(x_axe, number_of_humans, replace = TRUE) # with TRUE coordinates migtht be repeated.
y_positions <- sample(x_axe, number_of_humans, replace = TRUE)
# create dataframe of humans
df <- data.frame(human = 1:number_of_humans, x = x_positions, y = y_positions)
chec <- duplicated(df[,c(2,3)])
if (chec != 0) {
back_to_generate = 1
} else {
back_to_generate = 0
}
}
return(df)
}
df <- lattice_creation(m = 100, number_of_humans = N)
df
lattice_creation <- function(m, number_of_humans) {
x_axe <- y_axe <- 1:m
back_to_generate <- 1
while ( back_to_generate == 1) { # en caso que hayan coordenadas repetidas, se genera otra grilla.
# sampling positions
x_positions <- sample(x_axe, number_of_humans, replace = TRUE) # with TRUE coordinates migtht be repeated.
y_positions <- sample(x_axe, number_of_humans, replace = TRUE)
# create dataframe of humans
df <- data.frame(human = 1:number_of_humans, x = x_positions, y = y_positions)
chec <- duplicated(df[,c(2,3)])
if ( sum(chec) != 0) {
back_to_generate <- 1
} else {
back_to_generate <- 0
}
}
return(df)
}
df <- lattice_creation(m = 100, number_of_humans = N)
df
duplicated(df[,c(2,3)])
View(genStatialDistribution)
a = 1.3
C <- genStatialDistribution(df = df, alpha = a)
C
View(genStatialDistribution)
View(genSpatialNet)
View(get_powerLaw_prob)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 100
a = 1.8
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 100
a = 2.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 100
a = 4
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 100
a = 2.5
df <- lattice_creation(m = 200, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
SpatialNet_function.R")
N = 100
a = 2.5
df <- lattice_creation(m = 200, number_of_humans = N)
N = 200
a = 2.5
df <- lattice_creation(m = 100, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 100
a = 2.5
df <- lattice_creation(m = 50, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 100
a = 2.0
df <- lattice_creation(m = 50, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
N = 100
a = 2.0
df <- lattice_creation(m = 30, number_of_humans = N)
C <- genStatialDistribution(df = df, alpha = a)
g <- genSpatialNet(df = df, number_of_humans = N, C = C, alpha = a)
par(mar = c(1.5, 1.5, 1.5, 1.5))
plot(g,
edge.arrow.size =.3,
edge.curved = 0,
vertex.color = "yellow",
vertex.frame.color="#555555",
#vertex.label = V(mst_g)$name,
vertex.label.color = "black",
vertex.label.cex=.6,
vertex.size = 7)
title("Spatial ER Social Net", cex.main=0.5, col.main="black")
q()
